class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class slinkedlist:
    def __init__(self):
        self.head=None
    def display(self):
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
         while(temp):
            print(temp.data,end="-->")
            temp=temp.next
n1=Node(10)
s1=slinkedlist()
s1.head=n1
n2=Node(20)
n1.next=n2
n3=Node(30)
n2.next=n3
n4=Node(40)
n3.next=n4
s1.display()

#wap to reverse the single linked list:-
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class slinkedlist:
    def __init__(self):
        self.head=None
    def display(self):
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
         while(temp):
            print(temp.data,end="-->")
            temp=temp.next
    def rdisplay(self):
        l=[]
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
            while(temp):
                d=temp.data
                l.append(d)
                temp=temp.next
        for i in range(len(l)-1,-1,-1):
            print(l[i],end="-->") 
        
        
n1=Node(10)        
s1=slinkedlist()
s1.head=n1
n2=Node(20)
n1.next=n2
n3=Node(30)
n2.next=n3
n4=Node(40)
n3.next=n4      
s1.rdisplay()

#wap to Add the Element at the beginning of the single linked list:-
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class slinkedlist:
    def __init__(self):
        self.head=None
    def node_beg(self,data):
        nb=Node(data)
        temp=self.head
        nb.next=temp    
    def display(self):
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
         while(temp):
            print(temp.data,end="-->")
            temp=temp.next
n1=Node(10)
s1=slinkedlist()
s1.head=n1
n2=Node(20)
n1.next=n2
n3=Node(30)
n2.next=n3
n4=Node(40)
n3.next=n4
s1.node_beg(5)
s1.display()

#wap to add the element at the last of the Single linked list:-
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class slinkedlist:
    def __init__(self):
        self.head=None
    def node_end(self,data):
        ne=Node(data)
        temp=self.head
        while(temp.next!=None):
            temp=temp.next
        temp.next=ne
    def display(self):
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
         while(temp):
            print(temp.data,end="-->")
            temp=temp.next
n1=Node(10)
s1=slinkedlist()
s1.head=n1
n2=Node(20)
n1.next=n2
n3=Node(30)
n2.next=n3
n4=Node(40)
n3.next=n4
s1.node_end(50)
s1.display()

#wap to add the element at any position in the Single Linked list:-
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class slinkedlist:
    def __init__(self):
        self.head=None
    def node_pos(self,data,pos):
        np=Node(data)
        temp=self.head
        for i in range(1,pos):
            temp=temp.next
        np.next=temp.next
        temp.next=np
    def display(self):
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
         while(temp):
            print(temp.data,end="-->")
            temp=temp.next
n1=Node(10)
s1=slinkedlist()
s1.head=n1
n2=Node(20)
n1.next=n2
n3=Node(30)
n2.next=n3
n4=Node(40)
n3.next=n4
s1.node_pos(25,2)
s1.display()

#wap to delete the 1st node from a single linked list:-
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class slinkedlist:
    def __init__(self):
        self.head=None
    def node_del(self):
        temp=self.head
        self.head=temp.next
        temp.next=None
    def display(self):
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
         while(temp):
            print(temp.data,end="-->")
            temp=temp.next
n1=Node(10)
s1=slinkedlist()
s1.head=n1
n2=Node(20)
n1.next=n2
n3=Node(30)
n2.next=n3
n4=Node(40)
n3.next=n4
s1.node_del()
s1.display()

#wap to delete the last node from the Single linked list:-
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class slinkedlist:
    def __init__(self):
        self.head=None
    def node_del(self):
        temp=self.head
        while(temp.next.next!=None):
            temp=temp.next
        temp.next=None
    def display(self):
        temp=self.head
        if(self.head==None):
            print("Linked list is empty")
        else:
         while(temp):
            print(temp.data,end="-->")
            temp=temp.next
n1=Node(10)
s1=slinkedlist()
s1.head=n1
n2=Node(20)
n1.next=n2
n3=Node(30)
n2.next=n3
n4=Node(40)
n3.next=n4
s1.node_del()
s1.display()
