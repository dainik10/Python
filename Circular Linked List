# Circular Linked List:-
#   Circular linkedlist will be similar to singular linkedlist but in the single linkedlist the last node address will be null but in circular linkedlist last node will be connected to first the node that's why last node address is address of the first node.
# ~> single linkedlist only contain head, but circular linkedlist contain head and tail.
# ~> Head always poiniting to head node.
# ~> Tail always pointing to last node. 

# wap to create 4 nodes in circular linkedlist and display the data present in the circular linkedlist and reverse the data present in the nodes:-

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
class cll:
    def __init__(self):
        self.head = None
        self.tail = None        
    def display(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            while(True):
                print(temp.data,end="-->")
                temp = temp.next 
                if(temp == self.head):
                    break
            print(temp.data)    
n1=Node(10)
n2=Node(20)
n3=Node(30)
n4=Node(40)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n1
cl = cll()
cl.head = n1
cl.tail = n4
cl.display()

# wap to reverse the data present in the circular linkedlist:-
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
class cll:
    def __init__(self):
        self.head = None
        self.tail = None        
    def display(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            while(True):
                print(temp.data,end="-->")
                temp = temp.next 
                if(temp == self.head):
                    break
            print(temp.data)    
    def reverse(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            prev = None
            while(True):
                next = temp.next
                temp.next = prev
                prev = temp
                temp = next
                if(temp == self.head):
                    break
            self.head.next = prev
            self.head = prev
            self.display()
n1=Node(10)
n2=Node(20)
n3=Node(30)
n4=Node(40)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n1
cl = cll()
cl.head = n1
cl.tail = n4
cl.reverse()

# wap to add the node at the beginning of the circular linkedlist:-
class Node:    #1
    def __init__(self,data):
        self.data = data
        self.next = None
class cll:
    def __init__(self):
        self.head = None
        self.tail = None        
    def display(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            while(True):
                print(temp.data,end="-->")
                temp = temp.next 
                if(temp == self.head):
                    break
            print(temp.data)    
    def node_beg(self,data):
        newnode = Node(data)
        if(self.head == None):
            self.head = newnode
            self.tail = newnode
            newnode.next = self.head
        else:
            newnode.next = self.head
            self.head = newnode
            self.tail.next = self.head
         
n1=Node(10)
n2=Node(20)
n3=Node(30)
n4=Node(40)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n1
cl = cll()
cl.head = n1
cl.tail = n4
cl.node_beg(5)
cl.display()
 
class Node:     #2
    def __init__(self,data):
        self.data = data
        self.next = None
class cll:
    def __init__(self):
        self.head = None
        self.tail = None        
    def display(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            while(True):
                print(temp.data,end="-->")
                temp = temp.next 
                if(temp == self.head):
                    break
            print(temp.data)    
    def node_beg(self,data):
        temp=self.head
        newnode = Node(data)
        self.head = newnode
        newnode.next = temp
        self.tail.next = newnode
         
n1=Node(10)
n2=Node(20)
n3=Node(30)
n4=Node(40)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n1
cl = cll()
cl.head = n1
cl.tail = n4
cl.node_beg(5)
cl.display()

# wap to add the node at the end of the circular linkedlist:-
class Node:    
    def __init__(self,data):
        self.data = data
        self.next = None
class cll:
    def __init__(self):
        self.head = None
        self.tail = None        
    def display(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            while(True):
                print(temp.data,end="-->")
                temp = temp.next 
                if(temp == self.head):
                    break
            print(temp.data)    
    def node_end(self,data):
        temp=self.head
        newnode = Node(data)
        self.tail.next = newnode
        newnode.next = self.head
        self.tail = newnode
n1=Node(10)
n2=Node(20)
n3=Node(30)
n4=Node(40)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n1
cl = cll()
cl.head = n1
cl.tail = n4
cl.node_end(50)
cl.display()

#wap to add the node at the given position in the circular linkedlist:-
class Node:    
    def __init__(self,data):
        self.data = data
        self.next = None
class cll:
    def __init__(self):
        self.head = None
        self.tail = None        
    def display(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            while(True):
                print(temp.data,end="-->")
                temp = temp.next 
                if(temp == self.head):
                    break
            print(temp.data)    
    def node_pos(self,data):
        temp=self.head
        newnode = Node(data)
        pos = int(input("Enter the position: "))
        if(pos == 0):
            self.node_beg(data)
        elif(pos == 1):
            self.node_end(data)
        else:
            for i in range(pos-1):
                temp = temp.next
            newnode.next = temp.next
            temp.next = newnode
n1=Node(10)
n2=Node(20)
n3=Node(30)
n4=Node(40)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n1
cl = cll()
cl.head = n1
cl.tail = n4
cl.node_pos(25)
cl.display() 
