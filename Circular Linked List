# Circular Linked List:-
#   Circular linkedlist will be similar to singular linkedlist but in the single linkedlist the last node address will be null but in circular linkedlist last node will be connected to first the node that's why last node address is address of the first node.
# ~> single linkedlist only contain head, but circular linkedlist contain head and tail.
# ~> Head always poiniting to head node.
# ~> Tail always pointing to last node. 

# wap to create 4 nodes in circular linkedlist and display the data present in the circular linkedlist and reverse the data present in the nodes:-

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
class cll:
    def __init__(self):
        self.head = None
        self.tail = None        
    def display(self):
        if(self.head == None):
            print("Linkedlist is empty")
        else:
            temp = self.head
            while(True):
                print(temp.data,end="-->")
                temp = temp.next 
                if(temp == self.head):
                    break
            print(temp.data)    
n1=Node(10)
n2=Node(20)
n3=Node(30)
n4=Node(40)
n1.next = n2
n2.next = n3
n3.next = n4
n4.next = n1
cl = cll()
cl.head = n1
cl.tail = n4
cl.display()
