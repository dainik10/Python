class TrieNode:
  def _init_(self):
    self.children = {}
    self.is_end_of_word = False
class Trie:
  def _init_(self):
    self.root = TrieNode()

  def insert(self, word):
    node = self.root
    for char in word:
      if char not in node.children:
        node.children[char] = TrieNode()
      node = node.children[char]
    print(node.children)
    node.is_end_of_word = True
  def search(self, word):
    node = self.root
    for char in word:
      if char not in node.children:
        return False
      node = node.children[char]
    return node.is_end_of_word

  def starts_with(self, prefix):
    node = self.root
    for char in prefix:
      if char not in node.children:
        return False
      node = node.children[char]
    return True
# Example usage:
trie = Trie()
words = ["apple", "app", "banana", "bat","ball"]
for word in words:
  trie.insert(word)

print(trie.search("apple"))  
print(trie.search("app"))  
print(trie.search("banana"))  
print(trie.search("bat"))  
print(trie.search("ball"))  
print(trie.search("orange"))  

print(trie.starts_with("app"))  
print(trie.starts_with("ban"))  
print(trie.starts_with("bal"))  
print(trie.starts_with("ora"))
