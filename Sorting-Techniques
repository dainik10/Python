#Sorting algorithm in python:-
# ~> Python supports different sorting algorithm (seven - algorithm)
# 1) Bubble sort
# 2) Selection sort
# 3) Insertion sort
# 4) Merge sort
# 5) Quick sort
# 6) Radix sort (frequency sort)
# 7) heap sort

# 1) Bubble sort:-
# --> Bubble sort is worst sorting algorithm as comapre to all sorting algorithm.
# --> In bubble sort we have to comapre the adjacent elements , if the elements are not sorted then we have to sort.
# --> bubble sort will arrange the elements in ascending order or descending order
# ---> For ascending order we have to use greater than symbol and for lesser one we have to lesser than or equal to symbol.


# wap for implementation of Bubble Sort with Function approach:-
def bubble_sort(l):
  for i in range(len(l)-1):
    for j in range(len(l)-1):
        if(l[j]>l[j+1]):
            l[j],l[j+1]=l[j+1],l[j]
    print(l)
  return l
l = list(map(int,input().split()))
print("Before sorting:",l)
s = bubble_sort(l)
print("After sorting:",s)

#for string sorting according to the length:-
def bubble_sort(l):
  for i in range(len(l)-1):
    for j in range(len(l)-1):
        if(len(l[j])>len(l[j+1])):
            l[j],l[j+1]=l[j+1],l[j]
    print(l)
  return l
l = list(map(str,input().split()))
print("Before sorting:",l)
s = bubble_sort(l)
print("After sorting:",s)


# Selection Sort:-
# In the selection sort the 1st eleement will be considered as minimum element in a list.
# Remaining all the elements will be compared with the 1st element. 
# If any element is less than the minimum element then we first we are going to exchange the index position of minimum index.
# After all the comparison the minimum value will be placed in the 1st index position.

def selection_sort(l):
  for i in range(len(l)-1):
    min_index = i
    for j in range(i+1,len(l)):
      if(l[j]<l[min_index]):
        min_index = j
    l[i],l[min_index]=l[min_index],l[i]
    print(l)
  return l
l = list(map(int,input().split()))
print("Before sorting:",l)
s = selection_sort(l)
print("After sorting:",s)


# Merge Sort:-
# Merge sort works on the principle of divide and conquer Technique.
# First, we have to divide the elements into two equal parts, i.e., len(l)//2, this division is possible until the length==1. 
# For dividing the elements into equal parts, we use reccursion technique. 
# During comparison, we r going to compare left-side value with the right-side value, if the left-side value is less than the right-side value, then the left-side value will come first if condition is false then right-side value will come first.

def merge(left,right):
    merged = []
    i,j = 0,0 
    while(i<len(left) and j<len(right)):
        if(left[i]<right[j]):
            merged.append(left[i])
            i+=1
        else:
            merged.append(right[j])
            j+=1
    merged=merged+left[i:]+right[j:]
    return merged
def merge_sort(l):
    if(len(l)==1):
        return l
    else:
        mid = len(l)//2
        left = merge_sort(l[:mid])
        right = merge_sort(l[mid:])
        return merge(left,right)
l = list(map(int,input("Enter the ele: ").split()))
print("Before sorting:",l)
s = merge_sort(l)
print("After sorting:",s)


# Insertion Sort:-
def insertion_sort(l):
    for i in range(1,len(l)):
        key = l[i]
        j = i-1
        while(j>=0 and key<l[j]):
            l[j+1]=l[j]     
            j=j-1
        l[j+1]=key
        print(l)
    return l
l = list(map(int,input("Enter Elements: ").split()))
print("Before sorting:",l)
s = insertion_sort(l)
print("After sorting:",s)
